{"version":3,"sources":["Tile.js","Minimax.js","GamePanel.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Tile","props","className","onClick","style","value","color","board","i","winner","hasMoves","count","nextMove","newStates","push","getOptimalMove","player","maxDepth","bestScore","depth","Number","MAX_SAFE_INTEGER","move","moves","length","pos","possibleMove","ans","minimax","score","dpos","console","log","curr","isMax","best","dis","successors","possibility","val","GamePanel","id","Row","Button","variant","size","NewGame","ToggleButtonGroup","type","name","defaultValue","ToggleButton","onChange","handleChange","nextSymbol","showHint","marginTop","Board","state","tiles","Array","fill","starter","handleClickMultiPlayer","bind","handleClickSinglePlayer","f","this","x","Math","floor","random","tilesNew","setState","win_tiles","X","document","getElementsByClassName","col","outline","prev","hint","backgroundColor","setTimeout","event","target","height","Col","lg","md","handleClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.accfb0e3.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Tile(props) {\n    let Ostyle={color:\"#d8235a\"}\n    let Xstyle={color:\"#5bc0de\"}\n    return(\n        <div className='Tile' onClick={() => props.onClick()}>\n              <h1 className='TileContent' style={props.value=='O'?Ostyle:Xstyle}>{props.value}</h1>\n        </div>\n    )\n}\nexport default Tile\n","function value(board){\n    //check rows\n    for(let i=0; i<=6; i+=3){\n        if(board[i]===board[i+1] && board[i]===board[i+2]){\n            if(board[i]==='X')\n                return 15;\n            else if(board[i]==='O')\n                return -15;\n        }\n    }\n\n    //check columns\n    for(let i=0; i<3; i++){\n        if(board[i]===board[i+3] && board[i]===board[i+6]){\n            if(board[i]==='X')\n                return 15;\n            else if(board[i]==='O')\n                return -15;\n        }\n    }\n\n    //check diagnols\n    if(board[0]===board[4] && board[0]===board[8]){\n        if(board[0]==='X')\n            return 15;\n        else if(board[0]==='O')\n            return -15;\n    }\n    else if(board[2]===board[4] && board[2]===board[6]){\n        if(board[2]==='X')\n            return 15;\n        else if(board[2]==='O')\n            return -15;\n    }\n\n    return 0;\n}\n\nfunction winner(board){\n    //check rows\n    for(let i=0; i<=6; i+=3){\n        if(board[i]===board[i+1] && board[i]===board[i+2] && board[i]!=null){\n            return [i, i+1, i+2];\n        }\n    }\n\n    //check columns\n    for(let i=0; i<3; i++){\n        if(board[i]===board[i+3] && board[i]===board[i+6] && board[i]!=null){\n            return [i, i+3, i+6];\n        }\n    }\n\n    //check diagnols\n    if(board[0]===board[4] && board[0]===board[8] && board[0]!=null){\n        return [0, 4, 8];\n    }\n    else if(board[2]===board[4] && board[2]===board[6] && board[2]!=null){\n        return [2, 4, 6];\n    }\n    return[-1,-1,-1]\n}\nfunction hasMoves(board){\n    let count = 0;\n    for(let i=0; i<9; i++){\n        if(board[i]==null)\n            count++;\n    }\n    return count;\n}\n\nfunction nextMove(board){\n    let newStates = []\n\n    for(let i=0; i<9; i++){\n        if(board[i]===null)\n            newStates.push(i);\n    }\n\n    return newStates;\n}\n\nfunction getOptimalMove(board, player,maxDepth){\n    if(player==='X'){\n        let bestScore = -15;\n        let depth = Number.MAX_SAFE_INTEGER;\n        let move = -1;\n\n        let moves = nextMove(board);\n\n        for(let i=0;i<moves.length;i++){\n            let pos=moves[i]\n            let possibleMove=[...board]\n            possibleMove[pos] = 'X';\n\n            let ans = minimax(possibleMove, 0, false,maxDepth);\n\n            let score = ans[0]\n            let dpos = ans[1]\n            console.log(ans+\" \"+pos)\n            if(score===bestScore && dpos<depth){\n                bestScore = score;\n                depth = dpos;\n                move = pos;\n            }else if(score===bestScore && dpos>depth && score<15){\n                move=pos;\n                depth=dpos;\n            }\n            else if(score>bestScore){\n                bestScore = score;\n                depth = dpos;\n                move = pos;\n            }\n\n            // if(bestScore==15)\n            //     return move;\n        }\n\n        return move;\n    }else if(player==='O'){\n        let bestScore = 15;\n        let depth = Number.MAX_SAFE_INTEGER;\n        let move = -1;\n\n        let moves = nextMove(board);\n\n        for(let i=0;i<moves.length;i++){\n            let pos=moves[i]\n            let possibleMove=[...board]\n            possibleMove[pos] = 'O';\n\n            let ans = minimax(possibleMove, 0, true,maxDepth);\n\n            let score = ans[0]\n            let dpos = ans[1]\n            console.log(ans+\" \"+pos)\n            if(score===bestScore && dpos<depth){\n                bestScore = score;\n                depth = dpos;\n                move = pos;\n            }else if(score===bestScore && dpos>depth && score<15){\n                move=pos;\n                depth=dpos;\n            }else if(score<bestScore){\n                bestScore = score;\n                depth = dpos;\n                move = pos;\n            }\n\n            // if(bestScore==15)\n            //     return move;\n        }\n\n        return move;\n    }\n}\n\nfunction minimax(curr, depth, isMax, maxDepth){\n    // console.log(depth+\"*\"+curr)\n    let score = [value(curr), depth];\n    if(depth==maxDepth)\n       return score\n    if(score[0]===15 || score[0]===-15)\n        return score;\n    \n    if(hasMoves(curr)===0)\n        return score;\n\n    if(isMax){\n        let best = -15;\n        let dis = Number.MAX_SAFE_INTEGER;\n        let successors = nextMove(curr);\n        // console.log(curr+\"xxx\")\n        for(let i=0;i<successors.length;i++){\n            let pos=successors[i];\n            // console.log(pos+\"pos\")\n            let possibility=[...curr]\n            possibility[pos] = 'X';\n\n            let val = minimax(possibility, depth+1, !isMax,maxDepth);\n            if(val[0]>best){\n                best = val[0];\n                dis = val[1];\n            }else if(val[0]===best && val[1]<dis){\n                best = val[0];\n                dis = val[1];\n            }\n\n            // best = Math.max(best, minimax(possibility, depth+1, !isMax));\n        }\n        return [best, dis];\n    }\n    else{\n        let best = 15;\n        let dis = Number.MAX_SAFE_INTEGER;\n        let successors = nextMove(curr);\n        // console.log(curr+\"ooo\")\n        for(let i=0;i<successors.length;i++){\n            let pos=successors[i];\n            let possibility=[...curr]\n            possibility[pos] = 'O';\n\n            let val = minimax(possibility, depth+1, !isMax,maxDepth);\n            if(val[0]<best){\n                best = val[0];\n                dis = val[1];\n            }else if(val[0]===best && val[1]<dis){\n                best = val[0];\n                dis = val[1];\n            }\n\n            // best = Math.min(best, minimax(possibility, depth+1, !isMax));\n\n            // if(best==-15)\n            //     break;\n        }\n        return [best,dis];\n    }\n}\n\nexport {getOptimalMove,value,hasMoves,winner}","import React from 'react'\nimport { Row, Button, ToggleButtonGroup, ToggleButton } from 'react-bootstrap'\nfunction GamePanel(props)\n    {   \n        return(\n            <>\n            \n            <div className=\"GamePanel .d-none \" id=\"GamePanel\">\n                <div className=\"Panel\" id=\"Panel\">\n                    <Row className=\"mx-auto\">\n                        <Button variant=\"outline-info\" size=\"md\" className=\"panelText panelElement\" onClick={props.NewGame} >New Game</Button>\n                        <ToggleButtonGroup type=\"radio\" name=\"player\" size=\"md\"className=\"panelElement\" defaultValue={props.board.player}>\n                            <ToggleButton variant=\"outline-info\" type=\"radio\" value={1} onChange={props.handleChange} >Single Player</ToggleButton>\n                            <ToggleButton variant=\"outline-info\" type=\"radio\" value={2} onChange={props.handleChange} >Multi Player</ToggleButton>\n                        </ToggleButtonGroup>\n                    </Row>\n                    {props.board.player==1?\n                        <div>\n                            <Row>\n                                <p className=\"panelText panelElement\">Difficulty</p>   \n                            </Row>\n                            <Row>\n                                <ToggleButtonGroup type=\"radio\" name=\"depth\" size=\"md\" className=\"panelElement\" defaultValue={props.board.depth} >\n                                    <ToggleButton variant=\"outline-info\" value={1} onChange={props.handleChange}>1</ToggleButton>\n                                    <ToggleButton variant=\"outline-info\" value={2} onChange={props.handleChange}>2</ToggleButton>\n                                    <ToggleButton variant=\"outline-info\" value={3} onChange={props.handleChange}>3</ToggleButton>\n                                    <ToggleButton variant=\"outline-info\" value={4} onChange={props.handleChange}>4</ToggleButton>\n                                    <ToggleButton variant=\"outline-info\" value={9} onChange={props.handleChange}>Maximum</ToggleButton>\n                                </ToggleButtonGroup>\n                            </Row>\n                            <Row>\n                                <p className=\"panelText panelElement\">Who starts?</p>\n                            </Row>\n                            <Row>\n                                <ToggleButtonGroup type=\"radio\" name=\"nextSymbol\" size=\"md\" className=\"panelElement\"  defaultValue={props.board.nextSymbol}>\n                                    <ToggleButton variant=\"outline-info\" value=\"O\" onChange={props.handleChange} >Human</ToggleButton>\n                                    <ToggleButton variant=\"outline-info\" value=\"X\" onChange={props.handleChange} >Computer</ToggleButton>\n                                </ToggleButtonGroup>\n                            </Row>\n                        </div>:<></>\n                    }\n                    <Row>\n                        <Button variant=\"outline-info\" size=\"md\" className=\"panelElement panelText\" onClick={props.showHint} style={{marginTop:\"5px\"}}>Hint</Button>\n                    </Row>\n                </div>\n            </div>\n            </>\n        )\n    }\n\nexport default GamePanel","import React, { Component } from 'react'\nimport Tile from './Tile'\nimport {Col,Row} from 'react-bootstrap'\nimport { getOptimalMove, hasMoves, value ,winner} from './Minimax';\nimport GamePanel from './GamePanel';\n\nclass Board extends Component{\n    constructor(props){\n        super(props)\n        this.state={\n            tiles:Array(9).fill(null),\n            player: 1, //multiplayer or single player\n            depth:9,\n            nextSymbol:'O',\n            starter:1\n        }\n        this.handleClickMultiPlayer=this.handleClickMultiPlayer.bind(this)\n        this.handleClickSinglePlayer=this.handleClickSinglePlayer.bind(this)\n    }\n    componentDidUpdate(){\n        let f=0\n        for(let i=0;i<9;i++){\n            if(this.state.tiles[i]!==null)\n                f=1\n        }\n        if(this.state.nextSymbol=='X' && f!=1 && this.state.player==1){\n            let x=Math.floor(Math.random()*8)\n            let tilesNew=[...this.state.tiles]\n            tilesNew[x]='X'\n            this.setState({\n                tiles:tilesNew\n            })\n        }\n    }\n    handleClick(i){\n        if(this.state.player==1){\n            this.handleClickSinglePlayer(i)\n        }\n        else\n            this.handleClickMultiPlayer(i)\n    }\n    handleClickSinglePlayer(i){\n        if(this.state.tiles[i]===null){\n            let f=0\n            let tilesNew=[...this.state.tiles]\n            tilesNew[i]='O'\n            let win_tiles\n            if(hasMoves(this.state.tiles)!==0 && value(this.state.tiles)!==15 && value(this.state.tiles)!==-15){\n                win_tiles=winner(tilesNew)\n                if(win_tiles[0]==-1){\n                    let moveC = getOptimalMove([...tilesNew], 'X',this.state.depth)\n                    tilesNew[moveC] = 'X';\n                }\n                else{\n                    f=1\n                }\n                this.setState({\n                    tiles:tilesNew\n                })\n            }\n            if(f!=1)\n                win_tiles=winner(tilesNew)\n            if(win_tiles[0]>-1){\n                let X = document.getElementsByClassName(\"Tile\");\n                for(let i=0;i<3;i++){\n                    let col=tilesNew[win_tiles[0]]=='O'?\"#d8235a\":\"#5bc0de\"\n                    X[win_tiles[i]].style.outline=\"5px solid \"+col\n                }\n            }\n        }\n    }\n    handleClickMultiPlayer(i){\n        if(this.state.tiles[i]===null){\n            let tilesNew=[...this.state.tiles]\n            tilesNew[i]=this.state.nextSymbol\n            if(hasMoves(this.state.tiles)!==0 && value(this.state.tiles)!==15 && value(this.state.tiles)!==-15)\n                this.setState((prev)=>({\n                    tiles:tilesNew,\n                    nextSymbol:prev.nextSymbol=='O'?'X':'O'\n                }))\n            let win_tiles=winner(tilesNew)\n            if(win_tiles[0]>-1){\n                let X = document.getElementsByClassName(\"Tile\");\n                for(let i=0;i<3;i++){\n                    let col=tilesNew[win_tiles[0]]=='O'?\"#d8235a\":\"#5bc0de\"\n                    X[win_tiles[i]].style.outline=\"5px solid \"+col\n                }\n            }\n        }\n    }\n    showHint(){\n        if(hasMoves(this.state.tiles)!=0 && value(this.state.tiles)!=15 && value(this.state.tiles)!=-15){\n            let hint = getOptimalMove(this.state.tiles, this.state.nextSymbol, this.state.depth);\n            let X = document.getElementsByClassName(\"Tile\");\n            X[hint].style.backgroundColor=\"#d8235a\"\n            setTimeout(() => {\n                X[hint].style.backgroundColor=\"#1f1f25\"\n            }, 1000);\n        }\n    }\n    handleChange(event){\n        const {name,value}=event.target\n        this.setState({\n            [name]:value\n        })\n        if(name===\"player\"){\n            this.NewGame()\n        }\n        console.log(name+\" \"+value)\n    }\n    NewGame(){\n        this.setState({\n            tiles:Array(9).fill(null),\n            nextSymbol:'O'\n        })\n        let X = document.getElementsByClassName(\"Tile\");\n        for(let i=0;i<9;i++){\n            X[i].style.outline=\"none\"\n        }\n            \n    }\n    render(){\n        return(\n               <div className='Game'>\n                   <Row style={{height:\"100vh\"}}>\n                   <Col lg={4} md={12} className=\"GamePanelArea\">\n                       <GamePanel handleChange={(event)=>this.handleChange(event)} showHint={()=>this.showHint()} NewGame={()=>this.NewGame()} board={this.state}/>\n                   </Col>\n                    <Col lg={8} md={12} className=\"GameBoardArea\">\n                        <div className='Board'>\n                        <Row>\n                            <Tile value={this.state.tiles[0]} onClick={()=>this.handleClick(0)}/>\n                            <Tile value={this.state.tiles[1]} onClick={()=>this.handleClick(1)}/>\n                            <Tile value={this.state.tiles[2]} onClick={()=>this.handleClick(2)}/>\n                        </Row>\n                        <Row>\n                            <Tile value={this.state.tiles[3]} onClick={()=>this.handleClick(3)}/>\n                            <Tile value={this.state.tiles[4]} onClick={()=>this.handleClick(4)}/>\n                            <Tile value={this.state.tiles[5]} onClick={()=>this.handleClick(5)}/>\n                        </Row>\n                        <Row>\n                            <Tile value={this.state.tiles[6]} onClick={()=>this.handleClick(6)}/>\n                            <Tile value={this.state.tiles[7]} onClick={()=>this.handleClick(7)}/>\n                            <Tile value={this.state.tiles[8]} onClick={()=>this.handleClick(8)}/>\n                        </Row>\n                        </div>\n                    </Col>\n                    </Row>\n                </div>\n        )\n    }\n}\nexport default Board","import React, { Component } from 'react';\nimport './App.css';\nimport Board from './Board'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n  }\n  render(){\n    return (\n        <div className=\"App\">\n          <Board />\n        </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}